/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/dancer.glb -o src/components/Dancer.jsx 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

export function Dancer(props) {
  const group = React.useRef();
  const { scene, animations } = useGLTF("/dancer.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  const [currentAnimation, setCurrentAnimation] = useState("wave");

  useEffect(() => {
    scene.traverse((obj) => {
      if (obj.isMesh) {
        obj.castShadow = true;
        obj.receiveShadow = true;
      }
    });
  }, [scene, actions]);

  useEffect(() => {
    // actions[currentAnimation].fadeIn(0.5).play();
    actions[currentAnimation].play();
    return () => {
      // actions[currentAnimation].fadeOut(0.5).stop();
      actions[currentAnimation].stop();
    };
  }, [actions, currentAnimation]);

  return (
    <group
      onClick={() => {
        setCurrentAnimation((prev) => {
          if (prev === "wave") return "windmill";
          return "wave";
        });
      }}
      scale={0.01}
      position-y={0.8}
      ref={group}
      {...props}
      dispose={null}
    >
      <group name="AuxScene">
        <group position={[0, -82.942, -1.295]}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Ch03"
            geometry={nodes.Ch03.geometry}
            material={materials.Ch03_Body}
            skeleton={nodes.Ch03.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/dancer.glb");
